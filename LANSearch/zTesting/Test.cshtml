<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Test signalr</title>
    <link href="@Url.Content("~/Content/bootstrap.min.css")" rel="stylesheet">
    <link href="@Url.Content("~/Content/bootstrap-dialog.css")" rel="stylesheet">
    <link href="@Url.Content("~/Content/bootstrap-theme.min.css")" rel="stylesheet">
    <link href="@Url.Content("~/Content/lansearch.css")" rel="stylesheet">
</head>
<body>
    <div class="container">
        <h1>Notification Test</h1>
        <button onclick="testNotification()">Test Notification</button>
        <button onclick="lsNotification()">LanSearch Notification</button>
        <button onclick="dialogTest()">dialog test</button>
    </div>

    <script src="@Url.Content("~/Scripts/jquery-1.9.0.min.js")"></script>
    <script src="@Url.Content("~/Scripts/jquery.signalR-2.1.2.js")"></script>
    <script src="@Url.Content("~/Scripts/bootstrap.min.js")"></script>
    <script src="@Url.Content("~/Scripts/bootstrap-dialog.js")"></script>
    <script src="@Url.Content("~/Scripts/lansearch.js")"></script>
    @*<script src="/sr/hubs"></script>*@
    <script type="text/javascript">


        function testNotification() {

            // Let's check if the browser supports notifications
            if (!("Notification" in window)) {
                console.log("This browser does not support desktop notification");
                return;
            }
            // Let's check if the user is okay to get some notification
            else if (Notification.permission === "granted") {
                // If it's okay let's create a notification
                var notification = new Notification("Test OK, notifications are enabled.");
            }
            // Otherwise, we need to ask the user for permission
            // Note, Chrome does not implement the permission static property
            // So we have to check for NOT 'denied' instead of 'default'
            else if (Notification.permission !== 'denied') {
                Notification.requestPermission(function(permission) {
                    // Whatever the user answers, we make sure we store the information
                    if (!('permission' in Notification)) {
                        Notification.permission = permission;
                    }

                    // If the user is okay, let's create a notification
                    if (permission === "granted") {
                        var notification = new Notification("Test OK, notifications are now enabled.");
                    } else {
                        console.log("user rejected notifications");
                    }
                });
            }
        }
        function lsNotification() {
            if (Notification.permission === "granted") {
                var notification = new Notification("LANSearch Notification",
                {
                    dir: "ltr",
                    lang: "en",
                    body: "This is a test notification",
                    tag: "1"
            });
            }
            else {
                alert("Notifications are not enabled.");
            }
        }
        function dialogTest() {
            var howManyDialogs = 5;
            for (var i = 1; i <= howManyDialogs; i++) {
                var dialog = new BootstrapDialog({
                    title: 'Dialog No.' + i,
                    message: 'Hello Houston, this is dialog No.' + i,
                    id: "test-" + i,
                    buttons: [{
                        label: 'Close this dialog.',
                        action: function (dialogRef) {
                            dialogRef.close();
                        }
                    }, {
                        label: 'Close ALL opened dialogs',
                        cssClass: 'btn-warning',
                        action: function () {
                            // You can also use BootstrapDialog.closeAll() to close all dialogs.
                            $.each(BootstrapDialog.dialogs, function (id, dialog) {
                                console.log(dialog);
                            });
                        }
                    }]
                });
                dialog.open();
            }
        }

        $(function () {
            var disNotMsgShown = false;
            function browserNotification(name, message, tag) {
                if (!("Notification" in window)) {
                    if (console.log){
                        console.log("This browser does not support desktop notification");
                    }
                    return;
                }
                if (Notification.permission === "granted") {
                    var notification = new Notification("LANSearch: New results for "+name,
                    {
                        dir: "ltr",
                        lang: "en",
                        body: message,
                        tag: tag,
                        onclick: function(a,b,c) {
                            console.log("clicked");
                        }
                    });
                    notification.onclick = function () {
                        $.each(BootstrapDialog.dialogs, function (i, obj) {
                            if (obj.getId() == tag) {
                                obj.getModal().css('z-index', BootstrapDialog.ZINDEX_MODAL+500);
                                return false;
                            }
                        });
                    }
                    return;
                }
                if (console.log) {
                    console.log("Notifications are not allowed.");
                }
                if (disNotMsgShown) {
                    //TODO
                    disNotMsgShown = true;
                }
            }


                function htmlEncode(value) {
                    return $('<div />').text(value).html();
                }

                var connection = $.hubConnection("/sr", { useDefaultPath: false });
                var notifyHub = connection.createHubProxy('notificationHub');
                notifyHub.on('notify', function (id, name, url, items) {
                    if (items.length == 0) return;
                    var notId = "notify-" + id;

                    var shortMessage = "";
                    var htmlMessage = "";
                    $.each(items, function (i, obj) {
                        if (shortMessage.length > 0) {
                            shortMessage += "\n";
                        }
                        shortMessage += obj.FileName + " (" + obj.FileSize + ")";
                        htmlMessage += '<a class="list-group-item filelist" target="_blank" href="' + obj.FileUrl.replace('"', '') + '">' +
                            '<h4 class="media-heading">' + htmlEncode(obj.FileName) + '</h4>' +
                            '<div class="row">' +
                            '<div class="col-xs-6"><span class="glyphicon glyphicon-hdd"></span> ' + htmlEncode(obj.ServerName) + '</div>' +
                            '<div class="col-xs-6"><span class="glyphicon glyphicon-file"></span> ' + htmlEncode(obj.FileSize) + '</div>' +
                            '</div></a>';
                    });
                    var dialog;
                    $.each(BootstrapDialog.dialogs, function (i, obj) {
                        if (obj.getId() == id) {
                            dialog = obj;
                            return false;
                        }
                    });
                    if (!dialog) {
                        dialog = new BootstrapDialog({
                            id: notId,
                            title: "Search Notification for " + name,
                            message: htmlMessage,
                            draggable: true,
                            closable: false,
                            buttons: [
                                {
                                    label: 'Close',
                                    action: function(dialogRef) {
                                        dialogRef.close();
                                    }
                                }
                            ]
                        });
                    } else {
                        dialog.setMessage(htmlMessage);
                    }
                    dialog.open();
                    browserNotification(name, shortMessage, notId);
                });

                notifyHub.on('announcement', function (title, message, type) {
                    var dType;
                    switch (type) {
                        case "danger":
                            dType = BootstrapDialog.TYPE_DANGER;
                            break;
                        case "warning":
                            dType = BootstrapDialog.TYPE_WARNING;
                            break;
                        case "success":
                            dType = BootstrapDialog.TYPE_SUCCESS;
                            break;
                        default:
                            dType = BootstrapDialog.TYPE_INFO;
                            break;
                    }

                    var dialog= new BootstrapDialog({
                        title: title,
                        message: message,
                        type:dType,
                        draggable: true,
                        closable: false,
                        buttons: [
                            {
                                label: 'Close',
                                action: function (dialogRef) {
                                    dialogRef.close();
                                }
                            }
                        ]
                    });
                    dialog.open();
                });

                notifyHub.on('administratorMessage', function (message) {
                    var dialog = new BootstrapDialog({
                        title: "Message from LANSearch Administrator",
                        message: message,
                        type: BootstrapDialog.TYPE_WARNING,
                        draggable: true,
                        closable: false,
                        buttons: [
                            {
                                label: 'Close',
                                action: function (dialogRef) {
                                    dialogRef.close();
                                }
                            }
                        ]
                    });
                    dialog.open();
                });
                connection.start();
            });
    </script>
</body>
</html>